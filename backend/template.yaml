AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: Leaderboard Backend with Cognito, DynamoDB, and WebSocket

Parameters:
  CognitoClientId:
    Type: String
    Description: Cognito App Client ID
  CognitoClientSecret:
    Type: String
    Description: Cognito App Client Secret
  CognitoUserPoolId:
    Type: String
    Description: Cognito User Pool ID

Globals:
  Function:
    Runtime: nodejs18.x
    Timeout: 10
    Environment:
      Variables:
        COGNITO_REGION: eu-north-1
        COGNITO_CLIENT_ID: !Ref CognitoClientId
        COGNITO_CLIENT_SECRET: !Ref CognitoClientSecret
        COGNITO_USER_POOL_ID: !Ref CognitoUserPoolId
        DYNAMODB_TABLE_NAME: leaderboard
        CONNECTIONS_TABLE: websocket-connections
        WEBSOCKET_API_URL: !Sub "wss://${WebSocketApi}.execute-api.${AWS::Region}.amazonaws.com/production"

Resources:
  SignupFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.signupHandler
      Events:
        Signup:
          Type: Api
          Properties:
            Path: /signup
            Method: post

  LoginFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.loginHandler
      Events:
        Login:
          Type: Api
          Properties:
            Path: /login
            Method: post

  ConfirmFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.confirmHandler
      Events:
        Confirm:
          Type: Api
          Properties:
            Path: /confirm
            Method: post

  SubmitScoreFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.submitScoreHandler
      Events:
        Submit:
          Type: Api
          Properties:
            Path: /submit
            Method: post
      Policies:
        - DynamoDBCrudPolicy:
            TableName: leaderboard

  LeaderboardFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.getLeaderboardHandler
      Events:
        Leaderboard:
          Type: Api
          Properties:
            Path: /leaderboard
            Method: get
      Policies:
        - DynamoDBReadPolicy:
            TableName: leaderboard

  WebSocketConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.connectHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: websocket-connections

  WebSocketDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.disconnectHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: websocket-connections

  WebSocketMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: dist/index.messageHandler
      Policies:
        - DynamoDBCrudPolicy:
            TableName: websocket-connections

  LeaderboardTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: leaderboard
      AttributeDefinitions:
        - AttributeName: id
          AttributeType: S
        - AttributeName: user_id
          AttributeType: S
      KeySchema:
        - AttributeName: id
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: UserIndex
          KeySchema:
            - AttributeName: user_id
              KeyType: HASH
          Projection:
            ProjectionType: ALL
          BillingMode: PAY_PER_REQUEST
      BillingMode: PAY_PER_REQUEST

  WebSocketConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: websocket-connections
      AttributeDefinitions:
        - AttributeName: connectionId
          AttributeType: S
      KeySchema:
        - AttributeName: connectionId
          KeyType: HASH
      BillingMode: PAY_PER_REQUEST
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  WebSocketApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: NebulaWebSocketApi
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: $request.body.action

  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $connect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketConnectIntegration

  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $disconnect
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketDisconnectIntegration

  MessageRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref WebSocketApi
      RouteKey: $default
      AuthorizationType: NONE
      Target: !Join
        - /
        - - integrations
          - !Ref WebSocketMessageIntegration

  WebSocketConnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketConnectFunction.Arn}/invocations"

  WebSocketDisconnectIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketDisconnectFunction.Arn}/invocations"

  WebSocketMessageIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref WebSocketApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !Sub "arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${WebSocketMessageFunction.Arn}/invocations"

  WebSocketDeployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - DisconnectRoute
      - MessageRoute
    Properties:
      ApiId: !Ref WebSocketApi

  WebSocketStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: production
      ApiId: !Ref WebSocketApi
      DeploymentId: !Ref WebSocketDeployment

  WebSocketConnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketConnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$connect"

  WebSocketDisconnectPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketDisconnectFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$disconnect"

  WebSocketMessagePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref WebSocketMessageFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub "arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${WebSocketApi}/*/$default"
